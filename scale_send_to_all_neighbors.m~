function [Nodes_list] = scale_send_to_all_neighbors(Nodes_list, event)
% Send an event to a neighbor node    
    if isempty(Nodes_list(event.source).neighbors)
        return;
    end
    
    neighbors = Nodes_list(event.source).neighbors;
    
    %disp(sprintf('EVENT with message id# %d FORWARDED TO Neighbor ID %d', neighbor_id, event.id));
    for k=1:numel(neighbors)
        neighbor_id = neighbors(k);
        if ~isempty(Nodes_list(neighbor_id))
            if Nodes_list(neighbor_id).status == 1

               % record total received events
               Nodes_list(neighbor_id).received_events = Nodes_list(neighbor_id).received_events + 1; 

               % Drop the message if the node is its originator
               if event.originator == neighbor_id
                   return 
               end

               % add the event into the neighbor's buffer
               event.source = neighbor_id;

               action = [];
               action.type = 'receiving';
               action.packet_size = event.size;
               Nodes_list(neighbor_id).power = scale_power_consumption(Nodes_list(neighbor_id).power, action);

               disp(sprintf('NEIGHBOR Node ID# %d sending forwarded event with message id# %d', neighbor_id, event.id));

               % record total replayed events
               Nodes_list(neighbor_id).relayed_events = Nodes_list(neighbor_id).relayed_events + 1; 

               Nodes_list = scale_send_event(Nodes_list, event); 
            else
               disp(sprintf('NEIGHBOR Node ID# %d BUFFERING forwarded event with message id# %d', neighbor_id, event.id));
               Nodes_list(neighbor_id).buffer = [Nodes_list(neighbor_id).buffer, event];
            end
        end
    end
   
    return;
end
